# Default values for bsc.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

terminationGracePeriodSeconds: 180

image:
  repository: dysnix/bsc
  tag: latest
  pullPolicy: Always

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""
podManagementPolicy: OrderedReady

# enable this only once - when your blockchain is empty. It overwrites everything
init_genesis: true

# Don't use spaces or special chars
bsc:
  # we don't have other chains, it's just a pod label for now
  chain: mainnet
  #  Blockchain sync mode ("fast", "full", or "light") (default: fast)
  syncmode: "full"
  # Blockchain garbage collection mode ("full", "archive") (default: "full")
  gcmode: "full"
  base_path: "/data"
  rpcApi: "eth,net,web3,txpool,parlia"
  rpcVhosts: "*"
  wsApi: "net,web3,eth"
  wsOrigins: "*"
  graphQlVhosts: "*"
  maxpeers: 50
  cache: 8192

# livenessProbe:
#   initialDelaySeconds: 300
#   periodSeconds: 300
#   timeoutSeconds: 10
#   successThreshold: 1
#   failureThreshold: 2

# readinessProbe:
#   initialDelaySeconds: 300
#   periodSeconds: 300
#   timeoutSeconds: 10
#   successThreshold: 1
#   failureThreshold: 2

service:
  type: ClusterIP
  rpcPortName: &rpcPortName jsonrpc
  rpcPort: &rpcPort 8575
  wsPort: &wsPort 8576
  wsPortName: &wsPortName web-socket
  graphQlPort: &graphQlPort 8577
  graphQlPortName: &graphQlPortName qraphql
  p2pPort0: &p2pPort0 30311
  p2pPortName0: &p2pPortName0 p2p
  p2pPortProtocol0: &p2pPortProtocol0 TCP
  p2pPort1: &p2pPort1 30311
  p2pPortName1: &p2pPortName1 p2p-discovery
  p2pPortProtocol1: &p2pPortProtocol1 UDP
  metricsPortName: &metricsPortName metrics
  metricsPort: &metricsPort 9368
  ports:
    - port: *rpcPort
      name: *rpcPortName
    - port: *wsPort
      name: *wsPortName
    - port: *graphQlPort
      name: *graphQlPortName
    - port: *p2pPort0
      hostPort: *p2pPort0
      name: *p2pPortName0
      protocol: *p2pPortProtocol0
    - port: *p2pPort1
      hostPort: *p2pPort1
      name: *p2pPortName1
      protocol: *p2pPortProtocol1
    - port: *metricsPort
      name: *metricsPortName

metrics:
  enabled: false
  # image:
  #   repository: 31z4/ethereum-prometheus-exporter
  #   tag: v1.2.0
  #   pullPolicy: IfNotPresent
prometheus:
  rules:
    enabled: false

failback:
  enabled: false
  image:
    repository: nginxinc/nginx-unprivileged
    tag: "1.20-alpine"
    pullPolicy: IfNotPresent
  port: 8000

bxgateway:
  enabled: false
  image:
    repository: bloxroute/bxgateway
    tag: latest
    pullPolicy: Always
  rpc_port: 28332
  ws_port: 28333
  blockchain_protocol: Ethereum
  blockchain_network: Mainnet
  continent: EU
  id: ""
  enode: enode://36a560f85288fbeff16f25c8465a71945708e7bfffa2913c6d790fa56fc085781c2706c9bac04678bae31443ce2fd62937880c926a59ee3cf4373ab4ee32915a@116.203.150.138:30303
  # pubkey is 916e48fda462df7645d74c0700afb1e334906ac325462fa5791e4c1f42e7cddb39b2c34d24c903b498849b7893cbf796e42437c78b61e5ad7d082d9367eef23a
  # generator is https://gist.github.com/miguelmota/3793b160992b4ea0b616497b8e5aee2f
  private_key: c57e3fa169ab57e838f95310b2f28910b8811bca686d77d483cb00324a0e46f7
  certs:
    name0: external_gateway_cert.pem
    value0: ""
    name1: external_gateway_key.pem
    value1: ""

multicluster:
  enabled: false
  ingress:
    ip: ""
  service:
    port: 80

bscCmdOverride: false
bscCmd: ""

externalLB: false
externalLBIP: ""
externalLBSourceRanges: {}

externalLBp2p: false
externalLBp2pIP: ""

externalLBp2pDiscovery: false
externalLBp2pDiscoveryIP: ""

internalLB: false
internalLBIP: ""

persistence:
  enabled: true
  storageClass: ""
  accessMode: ReadWriteOnce
  size: "1000Gi"

ingress:
  rpc:
    enabled: false
    annotations:
      {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
      # nginx.ingress.kubernetes.io/cors-allow-headers: Content-Type
      # nginx.ingress.kubernetes.io/cors-allow-methods: POST, OPTIONS
    rules:
      []
      # host: &rpcHostName rpc.example.com
    tls:
      []
      # - hosts:
      #     - *rpcHostName
      #   secretName: ssd-tls-cert
  ws:
    enabled: false
    annotations:
      {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
      # nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
      # nginx.ingress.kubernetes.io/proxy-send-timeout: "3600"
    rules:
      []
      # host: &wssHostName wss.example.com
    tls:
      []
      # - hosts:
      #     - *wssHostName
      #   secretName: ssd-tls-cert

# resources:
#   requests:
#     cpu: "8"
#     memory: 32Gi
#   limits:
#     cpu: "16"
#     memory: 48Gi

## Autoscaling parameters
autoscaling:
  enabled: false
  # scaleDownDisabled: true
  # targetCPU: 60
  # minReplicas: 1
  # maxReplicas: 10
  # targetMemory: 50

securityContext:
  fsGroup: 101
  runAsGroup: 101
  runAsUser: 101

nodeSelector: {}
tolerations: []
affinity:
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        podAffinityTerm:
          labelSelector:
            matchLabels:
              app.kubernetes.io/name: "bsc"
              bsc/chain: "mainnet"
          topologyKey: failure-domain.beta.kubernetes.io/zone
