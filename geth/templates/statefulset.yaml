apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ template "geth.fullname" . }}
  labels:
    app: {{ template "geth.name" . }}
    chart: {{ template "geth.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  serviceName: {{ template "geth.name" . }}
  selector:
    matchLabels:
      app: {{ template "geth.name" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ template "geth.name" . }}
        release: {{ .Release.Name }}
        {{- include "geth.statefulset.annotations" . | nindent 8 }}
    spec:
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      initContainers:
      - name: remove-lock
        command:
        - rm
        - -f
        - /root/.ethereum/geth/LOCK
        image: busybox
        imagePullPolicy: IfNotPresent
        volumeMounts:
        - name: data
          mountPath: /root
      - name: remove-nodekey
        command:
        - rm
        - -f
        - /root/.ethereum/geth/nodekey
        image: busybox
        imagePullPolicy: IfNotPresent
        volumeMounts:
        - name: data
          mountPath: /root
      containers:
      {{- if .Values.proxy.enabled }}
      - name: {{ template "geth.fullname" . }}-proxy
        image: "{{ .Values.proxy.image.repository }}:{{ .Values.proxy.image.tag }}"
        imagePullPolicy: {{ .Values.proxy.image.pullPolicy | quote }}
        ports:
        - name: proxy-rpc
          containerPort: {{ .Values.proxy.rpcPort }}
        - name: proxy-ws
          containerPort: {{ .Values.proxy.wsPort }}
        env:
        - name: OTP_SECRET
          value: {{ .Values.proxy.otpSecret | quote }}
      {{- end }}
      - name: {{ template "geth.fullname" . }}
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
        {{ if or (.Values.testnet) (.Values.rinkeby) -}}{{/* remove networkId */ -}}
        command: ["/usr/local/bin/geth",{{ if .Values.testnet }} "--testnet",{{ end }}{{ if .Values.rinkeby }} "--rinkeby",{{ end }} "--syncmode", "{{ .Values.syncMode }}", "--pprof", "--pprofaddr=0.0.0.0", "--pprofport=6060", "--metrics", "--rpc", "--rpcapi", "{{ .Values.rpcApi }}", "--rpcaddr", "0.0.0.0", "--rpcport", "{{ .Values.rpcPort }}", "--rpcvhosts", "{{ .Values.rpcVhosts }}", "--rpccorsdomain", "'*'", "--ws", "--wsaddr", "0.0.0.0", "--wsport", "{{ .Values.wsPort }}", "--wsapi", "{{ .Values.wsApi }}", "--wsorigins", "{{ .Values.wsOrigins }}"{{ range $key, $val := .Values.customArgs }}, {{ printf "--%s" $key | quote }}{{ if $val }}, {{ $val | quote }}{{ end }}{{ end }}]
        {{ else -}}
        command: ["/usr/local/bin/geth", "--networkid", "{{ .Values.networkId }}", "--syncmode", "{{ .Values.syncMode }}", "--pprof", "--pprofaddr=0.0.0.0", "--pprofport=6060", "--metrics", "--rpc", "--rpcapi", "{{ .Values.rpcApi }}", "--rpcaddr", "0.0.0.0", "--rpcport", "{{ .Values.rpcPort }}", "--rpcvhosts", "{{ .Values.rpcVhosts }}", "--rpccorsdomain='*'", "--ws", "--wsaddr", "0.0.0.0", "--wsport", "{{ .Values.wsPort }}", "--wsapi", "{{ .Values.wsApi }}", "--wsorigins", "{{ .Values.wsOrigins }}"{{ range $key, $val := .Values.customArgs }}, {{ printf "--%s" $key | quote }}{{ if $val }}, {{ $val | quote }}{{ end }}{{ end }}]
        {{ end -}}
        ports:
        - name: rpc
          containerPort: {{ .Values.rpcPort }}
        - name: ws
          containerPort: {{ .Values.wsPort }}
        {{- if .Values.livenessProbe.enabled }}
        livenessProbe:
          {{- if and .Values.livenessProbe.exec (kindIs "string" .Values.livenessProbe.exec.command) }}
          {{- omit .Values.livenessProbe "enabled" "exec" | toYaml | nindent 10 }}
          exec:
            command:
              {{- tpl .Values.livenessProbe.exec.command . | nindent 14 }}
          {{- else }}
          {{- omit .Values.livenessProbe "enabled" | toYaml | nindent 10 }}
          {{- end }}
        {{- end }}
        {{- if .Values.readinessProbe.enabled }}
        readinessProbe:
          {{- if and .Values.readinessProbe.exec (kindIs "string" .Values.readinessProbe.exec.command) }}
          {{- omit .Values.readinessProbe "enabled" "exec" | toYaml | nindent 10 }}
          exec:
            command:
              {{- tpl .Values.readinessProbe.exec.command . | nindent 14 }}
          {{- else }}
          {{- omit .Values.readinessProbe "enabled" | toYaml | nindent 10 }}
          {{- end }}
        {{- end }}
        volumeMounts:
        - name: data
          mountPath: /root
        resources:
          {{- toYaml .Values.resources | nindent 10 }}
  volumeClaimTemplates:
  - metadata:
      name: data
      annotations:
        "helm.sh/resource-policy": keep
      labels:
        app: {{ template "geth.name" . }}
        chart: {{ template "geth.chart" . }}
        release: {{ .Release.Name }}
        heritage: {{ .Release.Service }}
        {{- if .Values.persistence.snapshotValue }}
        snapshot: {{ .Values.persistence.snapshotValue }}
        {{- end }}
    spec:
      accessModes:
      - "ReadWriteOnce"
      {{- if .Values.persistence.storageClassName }}
      storageClassName: {{ .Values.persistence.storageClassName | quote }}
      {{- end }}
      resources:
        requests:
          storage: {{ .Values.persistence.size | quote }}
